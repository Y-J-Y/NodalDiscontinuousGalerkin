"""
‚àá!(uÀ£, u ∏, u, Œ©)

# Description

    Compute gradient of u wrt physical grid

# Arguments

-   `uÀ£`: first component of the gradient, overwitten
-   `u ∏`: second component of the gradient, overwritten
-   `u`: scalar to take gradient of
-   `Œ©`: element to compute in

# Return Values



"""
function ‚àá!(uÀ£, u ∏, u, Œ©)
    # compute partial derivatives on ideal grid
    u ≥ = Œ©.D ≥ * u
    uÀ¢ = Œ©.DÀ¢ * u

    # compute partial derivatives on physical grid
    @. uÀ£ =  Œ©.rx * u ≥ + Œ©.sx * uÀ¢
    @. u ∏ =  Œ©.ry * u ≥ + Œ©.sy * uÀ¢

    return nothing
end


"""
‚àá(uÀ£, u ∏, u, Œ©)

# Description

    Compute gradient of u wrt physical grid

# Arguments

-   `u`: scalar to take gradient of
-   `Œ©`: element to compute in

# Return Values
- `ux`: partial with respect to x
- 'uy': partial with respect to y


"""
function ‚àá( u, Œ©)
    # compute partial derivatives on ideal grid
    u ≥ = Œ©.D ≥ * u
    uÀ¢ = Œ©.DÀ¢ * u

    # compute partial derivatives on physical grid
    uÀ£ =  @. Œ©.rx * u ≥ + Œ©.sx * uÀ¢
    u ∏ =  @. Œ©.ry * u ≥ + Œ©.sy * uÀ¢

    return uÀ£, u ∏
end

"""
‚àá‚®Ä(x, y, Œ©)

# Description

    Compute the divergence of u=(x,y) wrt physical grid

# Arguments

-   `x`: first component of vector u
-   `y`: second component of vector u
-   `Œ©`: element to compute in

# Return Values

-   `‚àá‚®Äu`: the divergence of u

"""
function ‚àá‚®Ä(x, y, Œ©)
    # compute partial derivatives on ideal grid
    x ≥ = Œ©.D ≥ * x
    xÀ¢ = Œ©.DÀ¢ * x
    y ≥ = Œ©.D ≥ * y
    yÀ¢ = Œ©.DÀ¢ * y

    # compute gradient on physical grid
    ‚àá‚®Äu = @. Œ©.rx * x ≥ + Œ©.sx * xÀ¢ + Œ©.ry * y ≥ + Œ©.sy * yÀ¢

    return ‚àá‚®Äu
end

"""
‚àá‚®Ç(x, y, Œ©)

# Description

    Compute the curl of u=(x,y) wrt physical grid

# Arguments

-   `x`: first component of vector u
-   `y`: second component of vector u
-   `Œ©`: element to compute in

# Return Values

-   `‚àá‚®Çu`: the curl of u

"""
function ‚àá‚®Ç(x, y, Œ©)
    # compute partial derivatives on ideal grid
    x ≥ = Œ©.D ≥ * x
    xÀ¢ = Œ©.DÀ¢ * x
    y ≥ = Œ©.D ≥ * y
    yÀ¢ = Œ©.DÀ¢ * y

    # compute gradient on physical grid
    ‚àá‚®Çu = @. Œ©.rx * y ≥ + Œ©.sx * yÀ¢ - Œ©.ry * x ≥ - Œ©.sy * xÀ¢

    return ‚àá‚®Çu
end

"""
‚àá‚®Ç‚àá‚®Ç(u, v, Œ©)

# Description

    Compute the curl of curl of u

# Arguments

-   `ux`: first component of vector
-   `uy`: second component of vector
-   `Œ©`: element to compute in

# Return Values

-   `(‚àá‚®Ç‚àá‚®Çu)À£`: first component the curl of curl u
-   `(‚àá‚®Ç‚àá‚®Çu) ∏`: second component the curl of curl u

"""
function ‚àá‚®Ç‚àá‚®Ç(ux, uy, Œ©)
    ‚àÇÀ£ux = Œ©.rx .* (Œ©.D ≥ * ux)  + Œ©.sx .* (Œ©.DÀ¢ * ux)
    ‚àÇ ∏ux = Œ©.ry .* (Œ©.D ≥ * ux)  + Œ©.sy .* (Œ©.DÀ¢ * ux)
    ‚àÇÀ£uy = Œ©.rx .* (Œ©.D ≥ * uy)  + Œ©.sx .* (Œ©.DÀ¢ * uy)
    ‚àÇ ∏uy = Œ©.ry .* (Œ©.D ≥ * uy)  + Œ©.sy .* (Œ©.DÀ¢ * uy)

    ‚àÇÀ£‚àÇ ∏ux = Œ©.ry .* (Œ©.D ≥ * ‚àÇÀ£ux)  + Œ©.sy .* (Œ©.DÀ¢ * ‚àÇÀ£ux)
    ‚àÇÀ£‚àÇ ∏uy = Œ©.ry .* (Œ©.D ≥ * ‚àÇÀ£uy)  + Œ©.sy .* (Œ©.DÀ¢ * ‚àÇÀ£uy)

    ‚àÇÀ£‚àÇÀ£uy = Œ©.rx .* (Œ©.D ≥ * ‚àÇÀ£uy)  + Œ©.sx .* (Œ©.DÀ¢ * ‚àÇÀ£uy)
    ‚àÇ ∏‚àÇ ∏ux = Œ©.ry .* (Œ©.D ≥ * ‚àÇ ∏ux)  + Œ©.sy .* (Œ©.DÀ¢ * ‚àÇ ∏ux)

    tmpÀ£ = ‚àÇÀ£‚àÇ ∏uy - ‚àÇ ∏‚àÇ ∏ux
    tmp ∏ = ‚àÇÀ£‚àÇ ∏ux - ‚àÇÀ£‚àÇÀ£uy
    return tmpÀ£ , tmp ∏
end




"""
‚àá‚®Ä!(‚àá‚®Äu, fx, fy, Œ©)

# Description

    Compute the divergence of u=(fx,fy) wrt physical grid

# Arguments
-   `‚àá‚®Äu`: allocated memory for result
-   `x`: first component of vector u
-   `y`: second component of vector u
-   `Œ©`: element to compute in

# Return Values

-   `‚àá‚®Äu`: the divergence of u

"""
function ‚àá‚®Ä!(‚àá‚®Äu, x, y, Œ©)
    # compute partial derivatives on ideal grid
    x ≥ = Œ©.D ≥ * x
    xÀ¢ = Œ©.DÀ¢ * x
    y ≥ = Œ©.D ≥ * y
    yÀ¢ = Œ©.DÀ¢ * y

    # compute gradient on physical grid
    @. ‚àá‚®Äu = Œ©.rx * x ≥ + Œ©.sx * xÀ¢ + Œ©.ry * y ≥ + Œ©.sy * yÀ¢
    return nothing
end



"""
ùíÆ‚àá‚®Ä!(‚àá‚®Äu, fx, fy, Œ©)

# Description

    Compute the weak + strong form divergence of u=(fx,fy) wrt physical grid
    the S stands for "symmetric" but really it should just stand for slow

# Arguments
-   `‚àá‚®Äu`: allocated memory for result
-   `x`: first component of vector u
-   `y`: second component of vector u
-   `Œ©`: element to compute in

# Return Values

-   `‚àá‚®Äu`: the divergence of u

"""
function ùíÆ‚àá‚®Ä!(‚àá‚®Äu, x, y, Œ©)
    # compute partial derivatives on ideal grid
    x ≥ = Œ©.D ≥ * x
    xÀ¢ = Œ©.DÀ¢ * x
    y ≥ = Œ©.D ≥ * y
    yÀ¢ = Œ©.DÀ¢ * y

    # compute gradient on physical grid
    number_of_elements = size(mesh.J)[2]
    for k in 1:number_of_elements
        ‚àÇÀ£ = Diagonal(Œ©.rx[:,k]) * Œ©.D ≥ + Diagonal(Œ©.sx[:,k]) * Œ©.DÀ¢
        ‚àÇ ∏ = Diagonal(Œ©.ry[:,k]) * Œ©.D ≥ + Diagonal(Œ©.sy[:,k]) * Œ©.DÀ¢
        M·µè = Diagonal(Œ©.J[:,k]) * Œ©.M
        Mi·µè = Œ©.Mi * inv(Diagonal(Œ©.J[:,k]))
        tmp = ‚àÇÀ£ * x[:,k] + ‚àÇ ∏ * y[:,k]
        tmp -=  Mi·µè * ((M·µè * ‚àÇÀ£ )') * x[:,k] + Mi·µè * ((M·µè * ‚àÇ ∏ )') * y[:,k]
        ‚àá‚®Äu[:,k] .= tmp * 0.5
    end
    return nothing
end


"""
advec(‚àá‚®Äu, fx, fy, Œ©)

# Description

    Compute the advection of a scalar Œ∏ by flow field (vx,vy)

# Arguments
-   `u‚®Ä‚àáŒ∏`: allocated memory for result
-   `vx`: first component of vector u
-   `vy`: second component of vector u
-   `Œ∏`: the scalar
-   `Œ©`: element to compute in

# Return Values

-   `‚àá‚®Äu`: the divergence of u

"""
function advec!(u‚®Ä‚àáŒ∏, vx, vy, Œ∏, Œ©)
    # compute gradient on physical grid
    tmpÀ£ =  Œ©.rx .* ( vx .* (Œ©.D ≥ * Œ∏) )
    tmpÀ£ += Œ©.sx .* ( vx .* (Œ©.DÀ¢ * Œ∏) )
    tmp ∏ =  Œ©.ry .* ( vy .* (Œ©.D ≥ * Œ∏) )
    tmp ∏ += Œ©.sy .* ( vy .* (Œ©.DÀ¢ * Œ∏) )

    @. u‚®Ä‚àáŒ∏ = (tmpÀ£ + tmp ∏)

    return nothing
end


"""
sym_advec(‚àá‚®Äu, fx, fy, Œ©)

# Description

-    Compute the advection of a scalar Œ∏ by flow field (vx,vy), symmetrized advection

# Arguments
-   `u‚®Ä‚àáŒ∏`: allocated memory for result
-   `vx`: first component of vector u
-   `vy`: second component of vector u
-   `Œ∏`: the scalar
-   `Œ©`: mesh to compute in

# Return Values

-   `u‚®Ä‚àáŒ∏`: symmetric advective component

"""
function sym_advec!(u‚®Ä‚àáŒ∏, vx, vy, Œ∏, Œ©)

    # compute gradient on physical grid
    tmpÀ£ = Œ©.rx .* ( Œ©.D ≥ * ( vx .* Œ∏ )  + vx .* (Œ©.D ≥ * Œ∏) )
    tmpÀ£ += Œ©.sx .* ( Œ©.DÀ¢ * ( vx .* Œ∏ )  + vx .* (Œ©.DÀ¢ * Œ∏) )
    tmp ∏ = Œ©.ry .* ( Œ©.D ≥ * ( vy .* Œ∏ )  + vy .* (Œ©.D ≥ * Œ∏) )
    tmp ∏ += Œ©.sy .* ( Œ©.DÀ¢ * ( vy .* Œ∏ )  + vy .* (Œ©.DÀ¢ * Œ∏) )

    @. u‚®Ä‚àáŒ∏ = (tmpÀ£ + tmp ∏) * 0.5
    return nothing
end


"""
make_periodic2D(Œ©)

# Description

- Takes a rectangular grid and modifies vmapP so that the domain becomes periodic

# Arguments

- `Œ©` : the mesh struct

# Return : nothing


"""
function make_periodic2D(Œ©)
    boundary_index = findall(grid.vmapM - grid.vmapP .‚âà 0.0)
    ax = minimum(grid.x)
    bx = maximum(grid.x)
    ay = minimum(grid.y)
    by = maximum(grid.y)
    leftface_index   =  findall(grid.x[:] .== ax)
    rightface_index  =  findall(grid.x[:] .== bx)
    bottomface_index =  findall(grid.y[:] .== ay)
    topface_index    =  findall(grid.y[:] .== by)

    for j in boundary_index
        global_index = grid.vmapM[j]
        x = grid.x[j]
        y = grid.y[j]
        if j in leftface_index
            findall(grid.y[rightface] .== y)
        end
    end


end
